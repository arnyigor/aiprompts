# preview.py
from PyQt6.QtCore import Qt, QTimer
from PyQt6.QtGui import QGuiApplication
from PyQt6.QtWidgets import (QDialog, QTextEdit, QVBoxLayout, QLabel,
                             QPushButton, QHBoxLayout, QMessageBox, QWidget, QTabWidget,
                             QLineEdit, QFormLayout, QGroupBox)

from src.huggingface_api import HuggingFaceAPI
from src.huggingface_dialog import HuggingFaceDialog
from src.lmstudio_api import LMStudioInference
from src.lmstudio_dialog import LMStudioDialog
from src.prompt_editor import ExampleSelectionDialog


class PromptPreview(QDialog):
    def __init__(self, prompt, settings):
        super().__init__()
        self.prompt = prompt
        self.settings = settings
        self.variable_inputs = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        self.ru_history = []  # –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        self.en_history = []  # –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–æ–≤
        try:
            self.hf_api = HuggingFaceAPI(settings=self.settings)
        except Exception as e:
            self.hf_api = None

        try:
            self.lm_api = LMStudioInference()
        except Exception as e:
            self.lm_api = None

        self.setWindowTitle("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–º–ø—Ç–∞")
        self.setGeometry(300, 300, 800, 600)

        self.init_ui()
        self.load_data()

    def init_ui(self):
        layout = QVBoxLayout()

        # Header —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        header_layout = QVBoxLayout()
        self.title_label = QLabel()
        self.title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.title_label.setStyleSheet("font-size: 18px; font-weight: bold;")

        self.description_label = QLabel()
        self.description_label.setWordWrap(True)
        self.description_label.setStyleSheet("color: #666;")

        header_layout.addWidget(self.title_label)
        header_layout.addWidget(self.description_label)
        layout.addLayout(header_layout)

        # Metadata
        meta_layout = QVBoxLayout()

        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        meta_row1 = QHBoxLayout()
        self.version_label = QLabel()
        self.status_label = QLabel()
        self.rating_label = QLabel()
        meta_row1.addWidget(self.version_label)
        meta_row1.addWidget(self.status_label)
        meta_row1.addWidget(self.rating_label)

        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        meta_row2 = QHBoxLayout()
        self.category_label = QLabel()
        self.tags_label = QLabel()
        meta_row2.addWidget(self.category_label)
        meta_row2.addWidget(self.tags_label)

        # –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö - –¥–∞—Ç—ã
        meta_row3 = QHBoxLayout()
        self.created_at_label = QLabel()
        self.updated_at_label = QLabel()
        meta_row3.addWidget(self.created_at_label)
        meta_row3.addWidget(self.updated_at_label)

        meta_layout.addLayout(meta_row1)
        meta_layout.addLayout(meta_row2)
        meta_layout.addLayout(meta_row3)
        layout.addLayout(meta_layout)

        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–æ–¥–µ–ª–∏
        layout.addWidget(QLabel("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–æ–¥–µ–ª–∏:"))
        self.models_text = QTextEdit()
        self.models_text.setReadOnly(True)
        self.models_text.setMaximumHeight(60)
        layout.addWidget(self.models_text)

        # Variables input
        if self.prompt.variables:
            variables_group = QGroupBox("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
            variables_layout = QFormLayout()

            for var in self.prompt.variables:
                input_field = QLineEdit()
                if var.examples:
                    input_field.setPlaceholderText(f"–ù–∞–ø—Ä–∏–º–µ—Ä: {', '.join(var.examples)}")
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –ø—Ä–∏–º–µ—Ä–æ–≤
                    input_layout = QHBoxLayout()
                    input_layout.addWidget(input_field)
                    insert_examples_btn = QPushButton("üìù")
                    insert_examples_btn.setFixedWidth(30)
                    insert_examples_btn.setToolTip("–í—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã")
                    insert_examples_btn.clicked.connect(
                        lambda checked, v=var, f=input_field: self.show_examples_dialog(v, f))
                    input_layout.addWidget(insert_examples_btn)
                    variables_layout.addRow(f"{var.description}:", input_layout)
                else:
                    input_field.setPlaceholderText(f"–í–≤–µ–¥–∏—Ç–µ {var.description}")
                    variables_layout.addRow(f"{var.description}:", input_field)
                self.variable_inputs[var.name] = input_field

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            buttons_layout = QHBoxLayout()

            apply_ru_btn = QPushButton("–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫ RU")
            apply_ru_btn.clicked.connect(lambda: self.apply_variables("ru"))
            buttons_layout.addWidget(apply_ru_btn)

            apply_en_btn = QPushButton("Apply to EN")
            apply_en_btn.clicked.connect(lambda: self.apply_variables("en"))
            buttons_layout.addWidget(apply_en_btn)

            variables_layout.addRow("", buttons_layout)

            variables_group.setLayout(variables_layout)
            layout.addWidget(variables_group)

        # Content —Å —Ç–∞–±–∞–º–∏
        layout.addWidget(QLabel("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:"))
        self.content_tabs = QTabWidget()

        # –†—É—Å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        ru_container = QWidget()
        ru_layout = QVBoxLayout()
        self.ru_content_edit = QTextEdit()
        self.ru_content_edit.setReadOnly(True)
        ru_layout.addWidget(self.ru_content_edit)

        ru_buttons = QHBoxLayout()
        ru_copy_btn = QPushButton("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å RU")
        ru_copy_btn.clicked.connect(lambda: self.copy_content("ru"))
        ru_undo_btn = QPushButton("‚Ü© –û—Ç–º–µ–Ω–∏—Ç—å")
        ru_undo_btn.clicked.connect(lambda: self.undo_changes("ru"))
        ru_undo_btn.setToolTip("–í–µ—Ä–Ω—É—Ç—å –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
        if self.hf_api:
            ru_hf_btn = QPushButton("–í—ã–ø–æ–ª–Ω–∏—Ç—å —á–µ—Ä–µ–∑ Hugging Face")
            ru_hf_btn.clicked.connect(lambda: self.execute_prompt("ru", "hf"))
        else:
            ru_hf_btn = QPushButton("–î–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á Hugging Face")
            ru_hf_btn.clicked.connect(self.add_huggingface_key)
            ru_hf_btn.setStyleSheet("background-color: #4CAF50; color: white;")

        ru_lm_btn = QPushButton("–í—ã–ø–æ–ª–Ω–∏—Ç—å —á–µ—Ä–µ–∑ LMStudio")
        ru_lm_btn.clicked.connect(lambda: self.execute_prompt("ru", "lm"))
        if not self.lm_api:
            ru_lm_btn.setEnabled(False)
            ru_lm_btn.setToolTip("LMStudio API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

        ru_buttons.addWidget(ru_copy_btn)
        ru_buttons.addWidget(ru_undo_btn)
        ru_buttons.addWidget(ru_hf_btn)
        ru_buttons.addWidget(ru_lm_btn)
        ru_layout.addLayout(ru_buttons)

        ru_container.setLayout(ru_layout)
        self.content_tabs.addTab(ru_container, "–†—É—Å—Å–∫–∏–π")

        # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        en_container = QWidget()
        en_layout = QVBoxLayout()
        self.en_content_edit = QTextEdit()
        self.en_content_edit.setReadOnly(True)
        en_layout.addWidget(self.en_content_edit)

        en_buttons = QHBoxLayout()
        en_copy_btn = QPushButton("Copy EN")
        en_copy_btn.clicked.connect(lambda: self.copy_content("en"))
        en_undo_btn = QPushButton("‚Ü© Undo")
        en_undo_btn.clicked.connect(lambda: self.undo_changes("en"))
        en_undo_btn.setToolTip("Revert to previous state")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
        if self.hf_api:
            en_hf_btn = QPushButton("Execute with Hugging Face")
            en_hf_btn.clicked.connect(lambda: self.execute_prompt("en", "hf"))
        else:
            en_hf_btn = QPushButton("Add Hugging Face API Key")
            en_hf_btn.clicked.connect(self.add_huggingface_key)
            en_hf_btn.setStyleSheet("background-color: #4CAF50; color: white;")

        en_lm_btn = QPushButton("Execute with LMStudio")
        en_lm_btn.clicked.connect(lambda: self.execute_prompt("en", "lm"))
        if not self.lm_api:
            en_lm_btn.setEnabled(False)
            en_lm_btn.setToolTip("LMStudio API is not available")

        en_buttons.addWidget(en_copy_btn)
        en_buttons.addWidget(en_undo_btn)
        en_buttons.addWidget(en_hf_btn)
        en_buttons.addWidget(en_lm_btn)
        en_layout.addLayout(en_buttons)

        en_container.setLayout(en_layout)
        self.content_tabs.addTab(en_container, "English")

        layout.addWidget(self.content_tabs)

        # Variables info
        self.vars_label = QLabel("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
        layout.addWidget(self.vars_label)
        self.vars_text = QTextEdit()
        self.vars_text.setReadOnly(True)
        self.vars_text.setMaximumHeight(100)
        layout.addWidget(self.vars_text)

        # Author info
        author_layout = QHBoxLayout()
        self.author_label = QLabel()
        self.source_label = QLabel()
        author_layout.addWidget(self.author_label)
        author_layout.addWidget(self.source_label)
        layout.addLayout(author_layout)

        # Buttons
        button_layout = QHBoxLayout()
        self.copy_content_btn = QPushButton("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç")
        self.copy_full_btn = QPushButton("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å—ë")
        self.close_btn = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")

        self.copy_content_btn.clicked.connect(self.copy_content)
        self.copy_full_btn.clicked.connect(self.copy_full)
        self.close_btn.clicked.connect(self.close)

        button_layout.addWidget(self.copy_content_btn)
        button_layout.addWidget(self.copy_full_btn)
        button_layout.addWidget(self.close_btn)
        layout.addLayout(button_layout)

        self.setLayout(layout)

    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–∞"""
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.title_label.setText(self.prompt.title)
        self.description_label.setText(self.prompt.description)

        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        self.version_label.setText(f"–í–µ—Ä—Å–∏—è: {self.prompt.version}")
        self.status_label.setText(f"–°—Ç–∞—Ç—É—Å: {self.prompt.status}")
        self.rating_label.setText(
            f"–†–µ–π—Ç–∏–Ω–≥: {self.prompt.rating['score']} ({self.prompt.rating['votes']} –≥–æ–ª–æ—Å–æ–≤)"
        )

        self.category_label.setText(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {self.prompt.category}")
        self.tags_label.setText(f"–¢–µ–≥–∏: {', '.join(self.prompt.tags)}")

        # –î–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        created_at = self.prompt.created_at.strftime(
            "%d.%m.%Y %H:%M") if self.prompt.created_at else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        updated_at = self.prompt.updated_at.strftime(
            "%d.%m.%Y %H:%M") if self.prompt.updated_at else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        self.created_at_label.setText(f"–°–æ–∑–¥–∞–Ω: {created_at}")
        self.updated_at_label.setText(f"–ò–∑–º–µ–Ω–µ–Ω: {updated_at}")

        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–æ–¥–µ–ª–∏
        self.models_text.setPlainText(
            ', '.join(
                self.prompt.compatible_models) if self.prompt.compatible_models else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
        )

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Ç–∞–±—ã
        if isinstance(self.prompt.content, dict):
            # –î–ª—è —Å–ª–æ–≤–∞—Ä—è —Å —è–∑—ã–∫–∞–º–∏
            self.ru_content_edit.setPlainText(
                self.prompt.content.get('ru', "–ù–µ—Ç —Ä—É—Å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
            )
            self.en_content_edit.setPlainText(
                self.prompt.content.get('en', "No English content")
            )
        else:
            # –î–ª—è —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            self.ru_content_edit.setPlainText(str(self.prompt.content))
            self.en_content_edit.setPlainText("No English content")

        # Variables
        if self.prompt.variables:
            variables = []
            for var in self.prompt.variables:
                var_text = f"‚Ä¢ {var.name} ({var.type}) - {var.description}"
                if var.examples:
                    var_text += f"\n–ü—Ä–∏–º–µ—Ä—ã: {', '.join(var.examples)}"
                variables.append(var_text)
            self.vars_text.setPlainText("\n".join(variables))
        else:
            self.vars_text.setPlainText("–ù–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")

        # Author info
        if hasattr(self.prompt, 'metadata'):
            author = self.prompt.metadata.get('author', {})
            author_name = author.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω')
            self.author_label.setText(f"–ê–≤—Ç–æ—Ä: {author_name}")

            source = self.prompt.metadata.get('source', '')
            if source:
                self.source_label.setText(f"–ò—Å—Ç–æ—á–Ω–∏–∫: {source}")
            else:
                self.source_label.hide()

    def apply_variables(self, lang: str):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫ —Ç–µ–∫—Å—Ç—É –ø—Ä–æ–º–ø—Ç–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞"""
        if not self.variable_inputs:
            return

        text = self.prompt.content.get(lang, '')
        text_edit = self.ru_content_edit if lang == "ru" else self.en_content_edit
        history = self.ru_history if lang == "ru" else self.en_history

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        history.append(text_edit.toPlainText())

        for var_name, input_field in self.variable_inputs.items():
            value = input_field.text().strip()
            if value:
                text = text.replace(f"[{var_name}]", value)

        text_edit.setPlainText(text)
        self.show_toast("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!" if lang == "ru" else "Changes applied")

    def copy_content(self, lang=None):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞"""
        clipboard = QGuiApplication.clipboard()

        if lang == "ru":
            text = self.ru_content_edit.toPlainText()
            message = "–†—É—Å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä!"
        elif lang == "en":
            text = self.en_content_edit.toPlainText()
            message = "English content copied to clipboard!"
        else:
            # –ö–æ–ø–∏—Ä—É–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç
            text = []
            ru_content = self.ru_content_edit.toPlainText()
            en_content = self.en_content_edit.toPlainText()

            if ru_content and ru_content != "–ù–µ—Ç —Ä—É—Å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞":
                text.append(f"–†—É—Å—Å–∫–∏–π:\n{ru_content}")
            if en_content and en_content != "No English content":
                text.append(f"English:\n{en_content}")

            text = "\n\n".join(text)
            message = "–í–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä!"

        clipboard.setText(text)
        self.show_toast(message)

    def copy_full(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        text = f"""–ü—Ä–æ–º–ø—Ç: {self.prompt.title}
    –í–µ—Ä—Å–∏—è: {self.prompt.version}
    –°—Ç–∞—Ç—É—Å: {self.prompt.status}
    –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {self.prompt.category}
    –¢–µ–≥–∏: {', '.join(self.prompt.tags)}
    –†–µ–π—Ç–∏–Ω–≥: {self.prompt.rating['score']} ({self.prompt.rating['votes']} –≥–æ–ª–æ—Å–æ–≤)
    –°–æ–∑–¥–∞–Ω: {self.prompt.created_at.strftime("%d.%m.%Y %H:%M") if self.prompt.created_at else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}
    –ò–∑–º–µ–Ω–µ–Ω: {self.prompt.updated_at.strftime("%d.%m.%Y %H:%M") if self.prompt.updated_at else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}

    –û–ø–∏—Å–∞–Ω–∏–µ:
    {self.prompt.description}

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–æ–¥–µ–ª–∏:
    {', '.join(self.prompt.compatible_models)}

    –ö–æ–Ω—Ç–µ–Ω—Ç:
    –†—É—Å—Å–∫–∏–π:
    {self.ru_content_edit.toPlainText()}

    English:
    {self.en_content_edit.toPlainText()}

    –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:
    {self.vars_text.toPlainText()}

    –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:
    –ê–≤—Ç–æ—Ä: {self.prompt.metadata.get('author', {}).get('name', '–ù–µ —É–∫–∞–∑–∞–Ω')}
    –ò—Å—Ç–æ—á–Ω–∏–∫: {self.prompt.metadata.get('source', '–ù–µ —É–∫–∞–∑–∞–Ω')}
    –ó–∞–º–µ—Ç–∫–∏: {self.prompt.metadata.get('notes', '')}"""

        clipboard = QGuiApplication.clipboard()
        clipboard.setText(text)
        self.show_toast("–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!")

    def undo_changes(self, lang: str):
        """–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞"""
        history = self.ru_history if lang == "ru" else self.en_history
        text_edit = self.ru_content_edit if lang == "ru" else self.en_content_edit

        if history:
            previous_text = history.pop()
            text_edit.setPlainText(previous_text)
            self.show_toast("–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã" if lang == "ru" else "Changes reverted")

    def show_toast(self, message):
        """–í—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        msg = QMessageBox(self)
        msg.setIcon(QMessageBox.Icon.Information)
        msg.setText(message)
        msg.setWindowTitle(" ")
        msg.setStandardButtons(QMessageBox.StandardButton.Ok)
        msg.show()
        QTimer.singleShot(1500, msg.close)

    def show_examples_dialog(self, variable, input_field):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–º–µ—Ä–æ–≤"""
        dialog = ExampleSelectionDialog(variable, self)
        if dialog.exec() == QDialog.DialogCode.Accepted:
            selected_examples = dialog.get_selected_examples()
            if selected_examples:
                if len(selected_examples) == 1:
                    input_field.setText(selected_examples[0])
                else:
                    input_field.setText(", ".join(selected_examples))

    def execute_prompt(self, lang: str, api: str):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç —á–µ—Ä–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã–π API"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞
            text_edit = self.ru_content_edit if lang == "ru" else self.en_content_edit
            prompt_text = text_edit.toPlainText()

            if not prompt_text.strip():
                QMessageBox.warning(
                    self,
                    "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ" if lang == "ru" else "Warning",
                    "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–ø—Ç" if lang == "ru" else "Enter prompt"
                )
                return

            if api == "hf":
                # –î–ª—è Hugging Face –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∂–∏–º –±–µ–∑ —É–ª—É—á—à–µ–Ω–∏—è
                dialog = HuggingFaceDialog(self.hf_api, self.settings, prompt_text, self,
                                           from_preview=True)
                if dialog.exec() == QDialog.DialogCode.Accepted:
                    result = dialog.get_result()
                    if result:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
                        history = self.ru_history if lang == "ru" else self.en_history
                        history.append(text_edit.toPlainText())
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                        text_edit.setPlainText(result)
                        self.show_toast(
                            "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω!" if lang == "ru" else "Result received!"
                        )
                    else:
                        QMessageBox.warning(
                            self,
                            "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ" if lang == "ru" else "Warning",
                            "–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç" if lang == "ru" else "Empty result received"
                        )
            else:
                # –î–ª—è LMStudio
                dialog = LMStudioDialog(prompt_text, self, from_preview=True)
                if dialog.exec() == QDialog.DialogCode.Accepted:
                    result = dialog.get_result()
                    if result:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
                        history = self.ru_history if lang == "ru" else self.en_history
                        history.append(text_edit.toPlainText())
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                        text_edit.setPlainText(result)
                        self.show_toast(
                            "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω!" if lang == "ru" else "Result received!"
                        )
                    else:
                        QMessageBox.warning(
                            self,
                            "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ" if lang == "ru" else "Warning",
                            "–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç" if lang == "ru" else "Empty result received"
                        )

        except Exception as e:
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞" if lang == "ru" else "Error",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç: {str(e)}" if lang == "ru" else f"Failed to execute prompt: {str(e)}"
            )

    def add_huggingface_key(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞ Hugging Face"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–ª—é—á
            current_key = self.settings.get_api_key("huggingface")

            # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–ª—è –≤–≤–æ–¥–∞ –∫–ª—é—á–∞
            dialog = QDialog(self)
            dialog.setWindowTitle("API –∫–ª—é—á Hugging Face")
            layout = QVBoxLayout()

            # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–ª—é—á–∞
            key_label = QLabel("–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á:")
            key_input = QLineEdit()
            key_input.setEchoMode(QLineEdit.EchoMode.Password)
            if current_key:
                key_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            else:
                key_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á")

            # –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∫–ª—é—á
            show_key = QPushButton("–ü–æ–∫–∞–∑–∞—Ç—å –∫–ª—é—á")
            show_key.setCheckable(True)
            show_key.clicked.connect(lambda: key_input.setEchoMode(
                QLineEdit.EchoMode.Normal if show_key.isChecked()
                else QLineEdit.EchoMode.Password
            ))

            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            buttons = QHBoxLayout()
            save_btn = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
            cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∞")

            # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç—ã –≤ layout
            layout.addWidget(key_label)
            layout.addWidget(key_input)
            layout.addWidget(show_key)
            buttons.addWidget(save_btn)
            buttons.addWidget(cancel_btn)
            layout.addLayout(buttons)

            dialog.setLayout(layout)

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            save_btn.clicked.connect(dialog.accept)
            cancel_btn.clicked.connect(dialog.reject)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
            if dialog.exec() == QDialog.DialogCode.Accepted:
                new_key = key_input.text().strip()
                if new_key:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á
                    self.settings.set_api_key("huggingface", new_key)

                    # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º API –∫–ª–∏–µ–Ω—Ç
                    self.hf_api = HuggingFaceAPI(settings=self.settings)

                    # –û–±–Ω–æ–≤–ª—è–µ–º UI
                    self.init_ui()

                    QMessageBox.information(
                        self,
                        "–£—Å–ø–µ—Ö",
                        "API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω"
                    )
                else:
                    QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "API –∫–ª—é—á –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å API –∫–ª—é—á: {str(e)}")
