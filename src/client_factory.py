import logging
from typing import Dict, Any

from src.interfaces import ProviderClient
from src.ollama_client import OllamaClient
from src.openai_client import OpenAICompatibleClient

logger = logging.getLogger(__name__)


class LLMClientFactory:
    """
    –ü—Ä–æ—Å—Ç–∞—è —Ñ–∞–±—Ä–∏–∫–∞: —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å–æ —Å—Ç—Ä–æ–∫–æ–≤—ã–º client_type –∏–∑ model_config.
    –ö–ª–∞—Å—Å—ã –Ω–µ —Ö—Ä–∞–Ω–∏–º –≤ –º–∞–ø–∞—Ö, —Å–æ–∑–¥–∞—ë–º –Ω–∞ –º–µ—Å—Ç–µ. –î–µ—Ñ–æ–ª—Ç—ã ‚Äî –≤–Ω—É—Ç—Ä–∏ –≤–µ—Ç–æ–∫.
    """

    @staticmethod
    def create_provider(model_config: Dict[str, Any]) -> ProviderClient:
        raw_ct = model_config.get("client_type")
        if not raw_ct:
            raise ValueError(f"–î–ª—è –º–æ–¥–µ–ª–∏ '{model_config.get('name')}' –Ω–µ —É–∫–∞–∑–∞–Ω 'client_type'.")

        client_type = str(raw_ct).strip().lower()
        name = model_config.get("name")

        logger.info("  üîß –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ '%s' –¥–ª—è –º–æ–¥–µ–ª–∏ '%s'...", client_type, name)

        # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        api_base = model_config.get("api_base")
        api_key = model_config.get("api_key")

        # === –í–µ—Ç–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–≥–æ –ø–æ —Å—Ç—Ä–æ–∫–µ ===
        if client_type == "ollama":
            # Ollama API (–Ω–µ OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π). –î–µ—Ñ–æ–ª—Ç: 11434 –±–µ–∑ /v1.
            api_base = "http://localhost:11434"
            logger.info("   - –ö–ª–∞—Å—Å: OllamaClient, URL: %s", api_base)
            # –ï—Å–ª–∏ –≤–∞—à OllamaClient –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç base_url ‚Äî –ø–µ—Ä–µ–¥–∞–µ–º; –∏–Ω–∞—á–µ —É–±–µ—Ä–∏—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç.
            return OllamaClient()

        elif client_type == "lmstudio":
            # OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π. –î–µ—Ñ–æ–ª—Ç: 1234 —Å /v1.
            api_base = "http://127.0.0.1:1234/v1"
            logger.info("   - –ö–ª–∞—Å—Å: OpenAICompatibleClient, URL: %s", api_base)
            return OpenAICompatibleClient(api_key=api_key, base_url=api_base)

        elif client_type == "jan":
            # OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π. –î–µ—Ñ–æ–ª—Ç: 1337 —Å /v1. <-- –í–ê–ñ–ù–û: –Ω–µ 11434!
            api_base = "http://127.0.0.1:1337/v1"
            logger.info("   - –ö–ª–∞—Å—Å: OpenAICompatibleClient, URL: %s", api_base)
            return OpenAICompatibleClient(api_key=api_key, base_url=api_base)

        elif client_type == "openai_compatible":
            # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π: –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω api_base.
            if not api_base:
                raise ValueError(
                    f"–î–ª—è 'openai_compatible' –º–æ–¥–µ–ª–∏ '{name}' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω 'api_base'."
                )
            logger.info("   - –ö–ª–∞—Å—Å: OpenAICompatibleClient, URL: %s", api_base)
            return OpenAICompatibleClient(api_key=api_key, base_url=api_base, )

        else:
            raise ValueError(
                f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–ª–∏–µ–Ω—Ç–∞: '{client_type}'. "
                f"–û–∂–∏–¥–∞–µ—Ç—Å—è –æ–¥–∏–Ω –∏–∑: 'ollama', 'lmstudio', 'jan', 'openai_compatible', 'gemini'."
            )
