# ==============================================================================
# GitHub Workflow: Сборка и публикация релиза ПРИЛОЖЕНИЯ
# ==============================================================================
# Этот воркфлоу отвечает за сборку исполняемых файлов для Windows,
# macOS и Linux (.AppImage).
#
# --- ТРИГГЕРЫ ЗАПУСКА ---
# 1. АВТОМАТИЧЕСКИ: при пуше нового тега в репозиторий (например, v1.2.3).
# 2. ВРУЧНУЮ: через вкладку "Actions" в репозитории GitHub.
# ==============================================================================

name: Create App Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Укажите тег для релиза приложения (например, v1.2.3)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  # --- ЗАДАЧА 1: Создать релиз на GitHub (без изменений) ---
  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag_name: ${{ steps.get_tag.outputs.name }}
    steps:
      - name: Determine Tag Name
        id: get_tag
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            TAG_NAME="${{ github.ref_name }}"
          else
            TAG_NAME="${{ github.event.inputs.tag }}"
          fi
          echo "Используемый тег: $TAG_NAME"
          echo "name=$TAG_NAME" >> $GITHUB_OUTPUT
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_tag.outputs.name }}
          release_name: App Release ${{ steps.get_tag.outputs.name }}
          body: "Сборка приложения Prompt Manager версии ${{ steps.get_tag.outputs.name }}."
          draft: false
          prerelease: ${{ contains(steps.get_tag.outputs.name, '-') }}

  # --- ЗАДАЧА 2: Сборка бинарных файлов для всех ОС ---
  build_assets:
    name: Build App for ${{ matrix.os }} (${{ matrix.arch }})
    needs: create_release
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          # Windows x64
          - os: windows
            runner: windows-latest
            arch: x64
            asset_ext: zip
            content_type: application/zip
          # macOS Intel (x86_64) via Rosetta
          - os: macos
            runner: macos-latest
            arch: x64
            emulate: true
            asset_ext: zip
            content_type: application/zip
          # macOS Apple Silicon (arm64)
          - os: macos
            runner: macos-latest
            arch: arm64
            asset_ext: zip
            content_type: application/zip
          # Linux x86_64 (AppImage)
          - os: linux
            runner: ubuntu-latest
            arch: x86_64
            asset_ext: AppImage
            content_type: application/x-appimage

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Установка зависимостей для Linux
      - name: Install AppImage prerequisites (Linux only)
        if: matrix.os == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libfuse2

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      # --- Установка имён файлов ---
      - name: Set Asset Names (Windows)
        if: matrix.os == 'windows'
        run: |
          echo "ASSET_NAME=PromptManager-${{ needs.create_release.outputs.tag_name }}-windows-x64" >> $env:GITHUB_ENV
          echo "APP_NAME=PromptManager" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Set Asset Names (macOS)
        if: matrix.os == 'macos'
        run: |
          echo "ASSET_NAME=PromptManager-${{ needs.create_release.outputs.tag_name }}-macos-${{ matrix.arch }}" >> $GITHUB_ENV
          echo "APP_NAME=PromptManager" >> $GITHUB_ENV
        shell: bash

      - name: Set Asset Names (Linux)
        if: matrix.os == 'linux'
        run: |
          echo "ASSET_NAME=PromptManager-${{ needs.create_release.outputs.tag_name }}-linux-x86_64.AppImage" >> $GITHUB_ENV
          echo "APP_NAME=PromptManager" >> $GITHUB_ENV
        shell: bash

      # --- Включение Rosetta для x64 на Apple Silicon ---
      - name: Enable Rosetta (macOS x64 only)
        if: matrix.os == 'macos' && matrix.emulate == 'true'
        run: |
          sudo softwareupdate --install-rosetta --agree-to-license
          echo "ROSETTA_ENABLED=1" >> $GITHUB_ENV

      # --- Сборка ---
      - name: Build with PyInstaller
        run: |
          # Для x64 на arm64 через Rosetta
          if [[ "${{ matrix.os }}" == "macos" && "${{ matrix.arch }}" == "x64" ]]; then
            arch -x86_64 pyinstaller --name "${{ env.APP_NAME }}" --onefile --windowed --paths ./src src/main.py
          else
            pyinstaller --name "${{ env.APP_NAME }}" --onefile --windowed --paths ./src src/main.py
          fi
        shell: bash

      # --- Сборка AppImage только для Linux ---
      - name: Build AppImage (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          # Скачиваем и делаем исполняемым appimagetool
          wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage -O appimagetool.AppImage
          chmod +x appimagetool.AppImage

          # Создаём структуру AppDir
          mkdir -p AppDir/usr/bin
          # Копируем один бинарник (не папку!)
          cp dist/${{ env.APP_NAME }} AppDir/usr/bin/

          # Создаём .desktop файл
          cat << EOF > AppDir/${{ env.APP_NAME }}.desktop
          [ Desktop Entry ]
          Name=${{ env.APP_NAME }}
          Exec=${{ env.APP_NAME }}
          Icon=icon
          Type=Application
          Categories=Utility;
          Terminal=false
          EOF
          
          # Копируем иконку (убедитесь, что она существует)
          cp assets/icon.png AppDir/icon.png
          
          # Делаем бинарник исполняемым
          chmod +x AppDir/usr/bin/${{ env.APP_NAME }}
          
          # Собираем AppImage
          ./appimagetool.AppImage AppDir "${{ env.ASSET_NAME }}"
      # --- Архивация для Windows и macOS ---
      - name: Archive built artifact (Windows)
        if: matrix.os == 'windows'
        run: Compress-Archive -Path dist/${{ env.APP_NAME }}.exe -DestinationPath ${{ env.ASSET_NAME }}.zip
        shell: pwsh

      - name: Archive built artifact (macOS)
        if: matrix.os == 'macos'
        run: zip -r ${{ env.ASSET_NAME }}.zip dist/"${{ env.APP_NAME }}.app"

      # --- Загрузка артефактов ---
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./${{ env.ASSET_NAME }}${{ matrix.asset_ext == 'zip' && '.zip' || '' }}
          asset_name: ${{ env.ASSET_NAME }}${{ matrix.asset_ext == 'zip' && '.zip' || '' }}
          asset_content_type: ${{ matrix.content_type }}