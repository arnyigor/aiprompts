# ==============================================================================
# GitHub Workflow: Сборка и публикация релиза ПРИЛОЖЕНИЯ
# ==============================================================================
# Этот воркфлоу отвечает за сборку исполняемых файлов для Windows,
# macOS и Linux (.AppImage).
#
# --- ТРИГГЕРЫ ЗАПУСКА ---
# 1. АВТОМАТИЧЕСКИ: при пуше нового тега в репозиторий (например, v1.2.3).
# 2. ВРУЧНУЮ: через вкладку "Actions" в репозитории GitHub.
# ==============================================================================

name: Create App Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Укажите тег для релиза приложения (например, v1.2.3)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  # --- ЗАДАЧА 1: Создать релиз на GitHub (без изменений) ---
  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag_name: ${{ steps.get_tag.outputs.name }}
    steps:
      - name: Determine Tag Name
        id: get_tag
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            TAG_NAME="${{ github.ref_name }}"
          else
            TAG_NAME="${{ github.event.inputs.tag }}"
          fi
          echo "Используемый тег: $TAG_NAME"
          echo "name=$TAG_NAME" >> $GITHUB_OUTPUT
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_tag.outputs.name }}
          release_name: App Release ${{ steps.get_tag.outputs.name }}
          body: "Сборка приложения Prompt Manager версии ${{ steps.get_tag.outputs.name }}."
          draft: false
          prerelease: ${{ contains(steps.get_tag.outputs.name, '-') }}

  # --- ЗАДАЧА 2: Сборка бинарных файлов для всех ОС ---
  build_assets:
    name: Build App for ${{ matrix.os }}
    needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, macos-13, ubuntu-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # НОВЫЙ ШАГ: Установка зависимостей для AppImage в Linux
      - name: Install AppImage prerequisites (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y fuse3

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Set Asset Names (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          echo "ASSET_NAME=PromptManager-${{ needs.create_release.outputs.tag_name }}-windows-x64" >> $env:GITHUB_ENV
          echo "APP_NAME=PromptManager" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Set Asset Names (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          echo "ASSET_NAME=PromptManager-${{ needs.create_release.outputs.tag_name }}-macos-$(uname -m)" >> $GITHUB_ENV
          echo "APP_NAME=PromptManager" >> $GITHUB_ENV
        shell: bash

      # НОВЫЙ ШАГ: Установка имён для Linux
      - name: Set Asset Names (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "ASSET_NAME=PromptManager-${{ needs.create_release.outputs.tag_name }}-linux-x86_64.AppImage" >> $GITHUB_ENV
          echo "APP_NAME=PromptManager" >> $GITHUB_ENV
        shell: bash

      # ИЗМЕНЕНО: Сборка разделена для разных ОС
      - name: Build with PyInstaller (Windows/macOS)
        if: matrix.os == 'windows-latest' || matrix.os == 'macos-latest'
        run: pyinstaller --name "${{ env.APP_NAME }}" --onefile --windowed --paths ./src src/main.py

      - name: Build with PyInstaller (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: pyinstaller --name "${{ env.APP_NAME }}" --onefile --noconfirm --windowed --paths ./src src/main.py

      # НОВЫЙ ШАГ: Создание AppImage из сборки PyInstaller
      - name: Build AppImage (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          # 1. Скачиваем linuxdeploy для сборки AppImage без FUSE
          wget -q https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage -O linuxdeploy.AppImage
          chmod +x linuxdeploy.AppImage

          # 2. Создаем структуру AppDir
          mkdir -p AppDir/usr/bin
          cp dist/${{ env.APP_NAME }} AppDir/usr/bin/
          chmod +x AppDir/usr/bin/"${{ env.APP_NAME }}"

          # 3. Создаем .desktop файл для меню приложений
          echo "[Desktop Entry]
          Name=${{ env.APP_NAME }}
          Exec=${{ env.APP_NAME }}
          Icon=icon
          Type=Application
          Categories=Utility;" > AppDir/${{ env.APP_NAME }}.desktop

          # 4. Копируем иконку
          cp assets/icon.png AppDir/icon.png

          # 5. Запускаем сборку AppImage с linuxdeploy (без FUSE)
          ./linuxdeploy.AppImage --appdir AppDir --output appimage --executable AppDir/usr/bin/"${{ env.APP_NAME }}"

      - name: Archive built artifact (Windows)
        if: matrix.os == 'windows-latest'
        run: Compress-Archive -Path dist/${{ env.APP_NAME }}.exe -DestinationPath ${{ env.ASSET_NAME }}.zip
        shell: pwsh

      - name: Archive built artifact (macOS)
        if: matrix.os == 'macos-latest'
        run: zip -r ${{ env.ASSET_NAME }}.zip dist/"${{ env.APP_NAME }}.app"

      # ИЗМЕНЕНО: Загрузка разделена для разных ОС
      - name: Upload Release Asset (Windows/macOS)
        if: matrix.os == 'windows-latest' || matrix.os == 'macos-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./${{ env.ASSET_NAME }}.zip
          asset_name: ${{ env.ASSET_NAME }}.zip
          asset_content_type: application/zip

      - name: Upload Release Asset (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./${{ env.ASSET_NAME }}
          asset_name: ${{ env.ASSET_NAME }}
          asset_content_type: application/x-appimage