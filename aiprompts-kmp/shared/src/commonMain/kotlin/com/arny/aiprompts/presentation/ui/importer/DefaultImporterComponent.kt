package com.arny.aiprompts.presentation.ui.importer

import com.arkivanov.decompose.ComponentContext
import com.arkivanov.essenty.lifecycle.coroutines.coroutineScope
import com.arny.aiprompts.data.mappers.toPromptJson
import com.arny.aiprompts.data.model.PromptJson
import com.arny.aiprompts.domain.files.FileMetadataReader
import com.arny.aiprompts.domain.interfaces.IHybridParser
import com.arny.aiprompts.domain.model.Author
import com.arny.aiprompts.domain.model.PromptData
import com.arny.aiprompts.domain.model.PromptVariant
import com.arny.aiprompts.domain.model.RawPostData
import com.arny.aiprompts.domain.system.SystemInteraction
import com.arny.aiprompts.domain.usecase.ParseRawPostsUseCase
import com.arny.aiprompts.domain.usecase.SavePromptsAsFilesUseCase
import com.benasher44.uuid.uuid4
import io.ktor.client.*
import io.ktor.client.call.*
import io.ktor.client.request.*
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch
import java.awt.Desktop
import java.io.File
import java.io.IOException
import java.net.URLDecoder
import java.nio.charset.StandardCharsets

class DefaultImporterComponent(
    componentContext: ComponentContext,
    private val filesToImport: List<File>,
    private val parseRawPostsUseCase: ParseRawPostsUseCase,
    private val savePromptsAsFilesUseCase: SavePromptsAsFilesUseCase,
    private val hybridParser: IHybridParser,
    private val httpClient: HttpClient,
    private val systemInteraction: SystemInteraction,
    private val fileMetadataReader: FileMetadataReader,
    private val onBack: () -> Unit
) : ImporterComponent, ComponentContext by componentContext {

    private val _state = MutableStateFlow(ImporterState(sourceHtmlFiles = filesToImport))
    override val state = _state.asStateFlow()

    // –•—Ä–∞–Ω–∏–º scope –∫–∞–∫ –ø–æ–ª–µ –∫–ª–∞—Å—Å–∞, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω –≤–æ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–∞—Ö
    private val scope = coroutineScope()

    // –ò—Å—Ç–æ—Ä–∏—è –¥–ª—è undo/redo
    private val stateHistory = mutableListOf<ImporterState>()
    private var historyIndex = -1

    init {
        loadAvailableCategories()
        loadAndParseFiles()
        loadInitialData()
    }

    private fun loadInitialData() {
        scope.launch(Dispatchers.IO) {
            _state.update { it.copy(isLoading = true, error = null) }

            // --- –®–∞–≥ 1: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π ---
            try {
                // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–∞–ø–∫—É prompts –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
                val promptsDirs = listOf(
                    File("prompts"),  // –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                    File("../prompts"),  // –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ
                    File("../../prompts"), // –µ—â–µ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ
                    File(System.getProperty("user.dir"), "prompts"), // –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
                )
                val promptsDir = promptsDirs.firstOrNull { it.exists() && it.isDirectory }
                requireNotNull(promptsDir) // –ë–µ–∑ –ø–∞–ø–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è
                println("‚úÖ –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–∞: ${promptsDir.absolutePath}")

                val savedFilesMap = fileMetadataReader.readAllSourceIds(promptsDir)
                if (savedFilesMap.isNotEmpty()) {
                    println("‚úÖ –ù–∞–π–¥–µ–Ω–æ ${savedFilesMap.size} —Å–≤—è–∑–µ–π –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:")
                    savedFilesMap.forEach { (sourceId, path) ->
                        println("   - sourceId: $sourceId -> –§–∞–π–ª: $path")
                    }
                } else {
                    println("‚ÑπÔ∏è –†–∞–Ω–µ–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                }
                _state.update { it.copy(savedFiles = savedFilesMap) }

                val categories = promptsDir.listFiles { file -> file.isDirectory }
                    ?.map { it.name }
                    ?.sorted()
                    ?: emptyList()

                if (categories.isNotEmpty()) {
                    _state.update { it.copy(availableCategories = categories) }
                    println("üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${categories.size} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –ø–∞–ø–∫–∏ prompts.")
                } else {
                    // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
                    val fallbackCategories = listOf(
                        "business", "common_tasks", "creative", "education",
                        "entertainment", "environment", "general", "healthcare",
                        "legal", "marketing", "model_specific", "science", "technology"
                    )
                    _state.update { it.copy(availableCategories = fallbackCategories) }
                    println("‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
                }
            } catch (e: Exception) {
                println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${e.message}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback.")
                // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ fallback –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–∞–∂–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                _state.update {
                    if (it.availableCategories.isEmpty()) {
                        it.copy(
                            availableCategories = listOf(
                                "business", "common_tasks", "creative", "education",
                                "entertainment", "environment", "general", "healthcare",
                                "legal", "marketing", "model_specific", "science", "technology"
                            )
                        )
                    } else {
                        it
                    }
                }
            }

            // --- –®–∞–≥ 2: –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º ---
            updateProgress(ImportStep.LOADING_FILES, 0f, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤", filesToImport.size)

            try {
                val allPostsWithDuplicates = mutableListOf<RawPostData>()
                filesToImport.forEachIndexed { index, file ->
                    updateProgress(
                        ImportStep.LOADING_FILES,
                        (index + 1).toFloat() / filesToImport.size,
                        file.name,
                        filesToImport.size,
                        index + 1
                    )
                    val posts = parseRawPostsUseCase(file).getOrElse { error ->
                        _state.update { s -> s.copy(error = "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ${file.name}: ${error.message}") }
                        emptyList()
                    }
                    allPostsWithDuplicates.addAll(posts)
                }

                updateProgress(ImportStep.LOADING_FILES, 1f, "–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
                val allPosts = allPostsWithDuplicates
                    .groupBy { it.postId }
                    .map { it.value.first() }

                updateProgress(ImportStep.LOADING_FILES, 1f, "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ—Å—Ç–æ–≤")
                val sortedPosts = allPosts.sortedWith(
                    compareByDescending<RawPostData> { it.attachments.isNotEmpty() }
                        .thenByDescending { it.isLikelyPrompt }
                        .thenByDescending { it.fullHtmlContent.length }
                )

                val firstPostToSelect = sortedPosts.firstOrNull()
                _state.update {
                    it.copy(
                        isLoading = false,
                        rawPosts = sortedPosts,
                        selectedPostId = firstPostToSelect?.postId,
                        progress = ImportProgress() // –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                    )
                }
                if (firstPostToSelect != null) {
                    ensureAndPrefillEditedData(firstPostToSelect)
                }
                _state.update { it.copy(successMessage = "–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${sortedPosts.size} –ø–æ—Å—Ç–æ–≤") }
            } catch (e: Exception) {
                _state.update {
                    it.copy(
                        isLoading = false,
                        error = "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${e.message}",
                        progress = ImportProgress()
                    )
                }
            }

            val finalState = _state.value
            println("--- üìä –ò—Ç–æ–≥–∏ –Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ ---")
            println("   - –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: ${finalState.rawPosts.size}")
            println("   - –ù–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–µ–π —Å —Ñ–∞–π–ª–∞–º–∏: ${finalState.savedFiles.size}")
            val matchedPosts = finalState.rawPosts.count { it.postId in finalState.savedFiles }
            println("   - –ü–æ—Å—Ç–æ–≤, —Å–æ–≤–ø–∞–≤—à–∏—Ö —Å–æ —Å–≤—è–∑—è–º–∏: $matchedPosts")
            println("------------------------------------")
        }
    }

    private fun loadAvailableCategories() {
        try {
            // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–∞–ø–∫—É prompts –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
            val promptsDirs = listOf(
                File("prompts"),  // –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                File("../prompts"),  // –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ
                File("../../prompts"),  // –µ—â–µ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ
                File(System.getProperty("user.dir"), "prompts"),  // –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
            )

            val promptsDir = promptsDirs.firstOrNull { it.exists() && it.isDirectory }

            if (promptsDir != null) {
                val categories = promptsDir.listFiles { file -> file.isDirectory }
                    ?.map { it.name }
                    ?.sorted()
                    ?: emptyList()

                _state.update {
                    it.copy(availableCategories = categories)
                }

                println("üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${categories.size} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –ø–∞–ø–∫–∏ prompts: ${categories.joinToString(", ")}")
            } else {
                // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º hardcoded –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                val fallbackCategories = listOf(
                    "business", "common_tasks", "creative", "education",
                    "entertainment", "environment", "general", "healthcare",
                    "legal", "marketing", "model_specific", "science", "technology"
                )

                _state.update {
                    it.copy(availableCategories = fallbackCategories)
                }

                println("üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${fallbackCategories.joinToString(", ")}")
            }
        } catch (e: Exception) {
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
            val fallbackCategories = listOf(
                "business", "common_tasks", "creative", "education",
                "entertainment", "environment", "general", "healthcare",
                "legal", "marketing", "model_specific", "science", "technology"
            )

            _state.update {
                it.copy(availableCategories = fallbackCategories)
            }

            println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${e.message}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
        }
    }

    private fun loadAndParseFiles() {
        scope.launch {
            _state.update { it.copy(isLoading = true, error = null) }
            updateProgress(ImportStep.LOADING_FILES, 0f, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤", filesToImport.size)

            try {
                // 1. –ü–∞—Ä—Å–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
                val allPostsWithDuplicates = mutableListOf<RawPostData>()
                filesToImport.forEachIndexed { index, file ->
                    updateProgress(
                        ImportStep.LOADING_FILES,
                        (index + 1).toFloat() / filesToImport.size,
                        file.name,
                        filesToImport.size,
                        index + 1
                    )

                    val posts = parseRawPostsUseCase(file).getOrElse { error ->
                        _state.update { s -> s.copy(error = "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ${file.name}: ${error.message}") }
                        emptyList()
                    }
                    allPostsWithDuplicates.addAll(posts)
                }

                updateProgress(ImportStep.LOADING_FILES, 1f, "–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")

                // 2. –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                val allPosts = allPostsWithDuplicates
                    .groupBy { it.postId }
                    .map { it.value.first() }

                updateProgress(ImportStep.LOADING_FILES, 1f, "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ—Å—Ç–æ–≤")

                // 3. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
                val sortedPosts = allPosts.sortedWith(
                    compareByDescending<RawPostData> { it.attachments.isNotEmpty() }
                        .thenByDescending { it.isLikelyPrompt }
                        .thenByDescending { it.fullHtmlContent.length }
                )

                val firstPostToSelect = sortedPosts.firstOrNull()

                _state.update {
                    it.copy(
                        isLoading = false,
                        rawPosts = sortedPosts,
                        selectedPostId = firstPostToSelect?.postId,
                        progress = ImportProgress() // –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                    )
                }

                if (firstPostToSelect != null) {
                    ensureAndPrefillEditedData(firstPostToSelect)
                }

                _state.update {
                    it.copy(successMessage = "–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${sortedPosts.size} –ø–æ—Å—Ç–æ–≤")
                }
            } catch (e: Exception) {
                _state.update {
                    it.copy(
                        isLoading = false,
                        error = "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${e.message}",
                        progress = ImportProgress()
                    )
                }
            }
        }
    }

    override fun onPostClicked(postId: String) {
        val selectedPost = _state.value.rawPosts.find { it.postId == postId } ?: return
        _state.update { it.copy(selectedPostId = postId) }
        ensureAndPrefillEditedData(selectedPost)
    }

    override fun onEditDataChanged(editedData: EditedPostData) {
        val postId = _state.value.selectedPostId ?: return
        saveStateToHistory()
        _state.update {
            val newEditedData = it.editedData + (postId to editedData)
            it.copy(editedData = newEditedData)
        }
    }

    override fun onBlockActionClicked(text: String, target: BlockActionTarget) {
        val postId = _state.value.selectedPostId ?: return
        val currentEditedData = _state.value.editedData[postId] ?: return

        val normalizedText = normalizeLineBreaks(text)

        val newEditedData = when (target) {
            BlockActionTarget.TITLE -> currentEditedData.copy(
                title = normalizedText.lines().firstOrNull()?.trim() ?: ""
            )

            BlockActionTarget.DESCRIPTION -> currentEditedData.copy(description = normalizeLineBreaks(if (currentEditedData.description.isBlank()) normalizedText else "${currentEditedData.description}\n\n$normalizedText"))
            BlockActionTarget.CONTENT -> currentEditedData.copy(content = normalizeLineBreaks(if (currentEditedData.content.isBlank()) normalizedText else "${currentEditedData.content}\n\n$normalizedText"))
        }
        _state.update {
            it.copy(editedData = it.editedData + (postId to newEditedData))
        }
    }

    override fun onSkipPostClicked() {
        // TODO: –î–æ–±–∞–≤–∏—Ç—å ID –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö
        selectNextUnprocessedPost()
    }

    override fun onSaveAndSelectNextClicked() {
        val postId = _state.value.selectedPostId ?: return
        onTogglePostForImport(postId, true)
        // –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç –±–µ–∑ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
        println("‚úÖ –ü–æ—Å—Ç $postId —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞")
    }

    override fun onSaveAndSelectPreviousClicked() {
        val postId = _state.value.selectedPostId ?: return
        onTogglePostForImport(postId, true)
        selectPreviousUnprocessedPost()
    }

    override fun onSelectNextPost() {
        selectNextPost()
    }

    override fun onSelectPreviousPost() {
        selectPreviousPost()
    }

    override fun onTogglePostForImport(postId: String, isChecked: Boolean) {
        val currentSet = _state.value.postsToImport.toMutableSet()
        if (isChecked) currentSet.add(postId) else currentSet.remove(postId)
        _state.update { it.copy(postsToImport = currentSet) }
    }

    override fun onBackClicked() {
        onBack()
    }

    override fun onVariantSelected(variant: PromptVariantData) {
        val postId = _state.value.selectedPostId ?: return
        val currentEditedData = _state.value.editedData[postId] ?: return

        // –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–ª–∏–∫–∞–µ—Ç –Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç, –º—ã –ø—Ä–æ—Å—Ç–æ –º–µ–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–µ
        val newEditedData = currentEditedData.copy(content = normalizeLineBreaks(variant.content))
        _state.update {
            it.copy(editedData = it.editedData + (postId to newEditedData))
        }
    }

    override fun onImportClicked() {
        scope.launch {
            println("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏–º–ø–æ—Ä—Ç–∞...")
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏ –∏ —Å—Ç–∞–≤–∏–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏
            _state.update { it.copy(isLoading = true, error = null, validationErrors = emptyMap()) }
            updateProgress(ImportStep.GENERATING_JSON, 0f, "–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")

            try {
                val postsToImport = _state.value.postsToImport
                var hasValidationErrors = false

                // --- –®–ê–ì 1: –í–ê–õ–ò–î–ê–¶–ò–Ø ---
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Å–∞–º –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–µ–π—Ç —Å –æ—à–∏–±–∫–∞–º–∏
                postsToImport.forEachIndexed { index, postId ->
                    updateProgress(
                        ImportStep.GENERATING_JSON,
                        (index + 1).toFloat() / (postsToImport.size * 2), // –ü—Ä–æ–≥—Ä–µ—Å—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–ø–µ—Ä–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞)
                        "–í–∞–ª–∏–¥–∞—Ü–∏—è: ${index + 1}/${postsToImport.size}"
                    )

                    if (!validateEditedData(postId)) {
                        hasValidationErrors = true
                    }
                }

                // –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ü–∏–∫–ª–∞ –Ω–∞—à–ª–∏—Å—å –æ—à–∏–±–∫–∏, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
                if (hasValidationErrors) {
                    _state.update {
                        it.copy(
                            isLoading = false,
                            error = "–ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –ø–æ–ª—è.",
                            progress = ImportProgress()
                        )
                    }
                    println("‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∏–º–ø–æ—Ä—Ç.")
                    return@launch
                }

                println("‚úÖ –í—Å–µ –ø–æ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–º–ø–æ—Ä—Ç.")
                updateProgress(ImportStep.GENERATING_JSON, 0.5f, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è JSON —Ñ–∞–π–ª–æ–≤")

                // --- –®–ê–ì 2: –ì–ï–ù–ï–†–ê–¶–ò–Ø –î–ê–ù–ù–´–• –î–õ–Ø JSON ---
                val finalPrompts = postsToImport.mapIndexedNotNull { index, postId ->
                    updateProgress(
                        ImportStep.GENERATING_JSON,
                        0.5f + (index + 1).toFloat() / (postsToImport.size * 2), // –ü—Ä–æ–≥—Ä–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–≤—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞)
                        "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞: ${index + 1}/${postsToImport.size}"
                    )

                    val rawPost = _state.value.rawPosts.find { it.postId == postId }
                    val editedData = _state.value.editedData[postId]

                    if (rawPost != null && editedData != null) {
                        PromptData(
                            id = uuid4().toString(),
                            sourceId = rawPost.postId,
                            title = editedData.title.ifBlank { "Prompt ${rawPost.postId}" },
                            description = editedData.description,
                            variants = listOf(PromptVariant(content = editedData.content)),
                            author = rawPost.author,
                            createdAt = rawPost.date.toEpochMilliseconds(),
                            updatedAt = rawPost.date.toEpochMilliseconds(),
                            category = editedData.category,
                            tags = editedData.tags,
                            variables = editedData.variables
                        )
                    } else {
                        null // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –ø–æ—Å—Ç
                    }
                }

                updateProgress(ImportStep.GENERATING_JSON, 1f, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤")
                println("üíæ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ${finalPrompts.size} –ø—Ä–æ–º–ø—Ç–æ–≤...")

                // --- –®–ê–ì 3: –°–û–•–†–ê–ù–ï–ù–ò–ï –§–ê–ô–õ–û–í ---
                savePromptsAsFilesUseCase(finalPrompts)
                    .onSuccess { savedFiles ->
                        println("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${savedFiles.size} –ø—Ä–æ–º–ø—Ç–æ–≤.")
                        savedFiles.forEachIndexed { index, file ->
                            println("   ${index + 1}. ${file.absolutePath}")
                        }

                        val successMessage = buildString {
                            append("‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${savedFiles.size} –ø—Ä–æ–º–ø—Ç–æ–≤!\n\n")
                            append("üìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–∞—Ö:\n")
                            savedFiles.groupBy { it.parentFile?.name ?: "unknown" }
                                .forEach { (category, files) ->
                                    append("‚Ä¢ $category: ${files.size} —Ñ–∞–π–ª–æ–≤\n")
                                }
                        }

                        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É —Å–≤—è–∑–µ–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¢–ï–ö–£–©–ï–ô –°–ï–°–°–ò–ò,
                        // —á—Ç–æ–±—ã UI —Å—Ä–∞–∑—É –æ—Ç—Ä–∞–∑–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–∫–∞–∑–∞–ª –∏–∫–æ–Ω–∫—É "–∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ")
                        val newSavedFiles = finalPrompts.associate { prompt ->
                            prompt.sourceId to (savedFiles.find { it.nameWithoutExtension == prompt.id }?.absolutePath
                                ?: "")
                        }.filterValues { it.isNotEmpty() }

                        _state.update {
                            it.copy(
                                isLoading = false,
                                successMessage = successMessage,
                                progress = ImportProgress(),
                                savedFiles = it.savedFiles + newSavedFiles // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–≤—è–∑–∏ –∫ —Å—Ç–∞—Ä—ã–º
                            )
                        }

                        // –í—ã–∑—ã–≤–∞–µ–º –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                        systemInteraction.showNotification(
                            "–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω",
                            "–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${savedFiles.size} –ø—Ä–æ–º–ø—Ç–æ–≤"
                        )
                    }
                    .onFailure { error ->
                        println("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${error.message}")
                        error.printStackTrace()
                        _state.update {
                            it.copy(
                                isLoading = false,
                                error = "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${error.message}",
                                progress = ImportProgress()
                            )
                        }
                    }
            } catch (e: Exception) {
                _state.update {
                    it.copy(
                        isLoading = false,
                        error = "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∏–º–ø–æ—Ä—Ç–∞: ${e.message}",
                        progress = ImportProgress()
                    )
                }
            }
        }
    }

    private fun ensureAndPrefillEditedData(post: RawPostData) {
        if (!_state.value.editedData.containsKey(post.postId)) {
            val extractedData = hybridParser.analyzeAndExtract(post.fullHtmlContent)

            val newEditedData = if (extractedData != null) {
                // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫ –≤ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                extractedData.copy(
                    title = normalizeLineBreaks(extractedData.title),
                    description = normalizeLineBreaks(extractedData.description),
                    content = normalizeLineBreaks(extractedData.content)
                )
            } else {
                EditedPostData(
                    title = "–ü—Ä–æ–º–ø—Ç –æ—Ç ${post.author.name} (${post.postId})",
                    description = normalizeLineBreaks(
                        post.fullHtmlContent
                            .replace(Regex("<br\\s*/?>", RegexOption.IGNORE_CASE), "\n")
                            .replace(Regex("<.*?>"), "")
                            .trim()
                    ),
                    content = ""
                )
            }
            _state.update {
                it.copy(editedData = it.editedData + (post.postId to newEditedData))
            }
        }
    }

    private fun selectNextUnprocessedPost() {
        val currentState = _state.value
        val processedIds = currentState.postsToImport // + –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ID –≤ –±—É–¥—É—â–µ–º
        val currentIndex = currentState.rawPosts.indexOfFirst { it.postId == currentState.selectedPostId }

        val nextPost = currentState.rawPosts
            .drop(currentIndex + 1) // –ò—â–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ
            .firstOrNull { it.postId !in processedIds }
            ?: currentState.rawPosts.firstOrNull { it.postId !in processedIds } // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º —Å –Ω–∞—á–∞–ª–∞

        if (nextPost != null) {
            onPostClicked(nextPost.postId)
        } else {
            _state.update { it.copy(selectedPostId = null) }
        }
    }

    private fun selectPreviousUnprocessedPost() {
        val currentState = _state.value
        val processedIds = currentState.postsToImport // + –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ID –≤ –±—É–¥—É—â–µ–º
        val currentIndex = currentState.rawPosts.indexOfFirst { it.postId == currentState.selectedPostId }

        val previousPost = currentState.rawPosts
            .take(currentIndex) // –ò—â–µ–º —Ç–æ–ª—å–∫–æ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ
            .lastOrNull { it.postId !in processedIds }
            ?: currentState.rawPosts.lastOrNull { it.postId !in processedIds } // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º —Å –∫–æ–Ω—Ü–∞

        if (previousPost != null) {
            onPostClicked(previousPost.postId)
        } else {
            _state.update { it.copy(selectedPostId = null) }
        }
    }

    private fun selectNextPost() {
        val currentState = _state.value
        val currentIndex = currentState.rawPosts.indexOfFirst { it.postId == currentState.selectedPostId }

        val nextPost = if (currentIndex >= 0 && currentIndex < currentState.rawPosts.size - 1) {
            currentState.rawPosts[currentIndex + 1]
        } else {
            currentState.rawPosts.firstOrNull() // –ó–∞—Ü–∏–∫–ª–∏–≤–∞–µ–º—Å—è –Ω–∞ –Ω–∞—á–∞–ª–æ
        }

        if (nextPost != null) {
            onPostClicked(nextPost.postId)
        }
    }

    private fun selectPreviousPost() {
        val currentState = _state.value
        val currentIndex = currentState.rawPosts.indexOfFirst { it.postId == currentState.selectedPostId }

        val previousPost = if (currentIndex > 0) {
            currentState.rawPosts[currentIndex - 1]
        } else {
            currentState.rawPosts.lastOrNull() // –ó–∞—Ü–∏–∫–ª–∏–≤–∞–µ–º—Å—è –Ω–∞ –∫–æ–Ω–µ—Ü
        }

        if (previousPost != null) {
            onPostClicked(previousPost.postId)
        }
    }

    // --- –ù–û–í–´–ï –ú–ï–¢–û–î–´ –ò–ù–¢–ï–†–§–ï–ô–°–ê ---

    override fun onSearchQueryChanged(query: String) {
        saveStateToHistory()
        _state.update {
            it.copy(filters = it.filters.copy(searchQuery = query))
        }
    }

    override fun onFilterChanged(filter: PostFilters) {
        saveStateToHistory()
        _state.update {
            it.copy(filters = filter)
        }
    }

    override fun onGroupingChanged(grouping: PostGrouping) {
        saveStateToHistory()
        _state.update {
            it.copy(grouping = grouping)
        }
    }

    override fun onTogglePreview() {
        _state.update {
            it.copy(showPreview = !it.showPreview)
        }
    }

    override fun onTogglePostExpansion(postId: String) {
        val currentExpanded = _state.value.expandedPostIds
        val newExpanded = if (postId in currentExpanded) {
            currentExpanded - postId
        } else {
            currentExpanded + postId
        }
        _state.update {
            it.copy(expandedPostIds = newExpanded)
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è URL —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π
    private fun decodeUrlWithCyrillic(url: String): String {
        return try {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ UTF-8
            URLDecoder.decode(url, StandardCharsets.UTF_8)
        } catch (e: Exception) {
            try {
                // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º Windows-1251
                URLDecoder.decode(url, "Windows-1251")
            } catch (e2: Exception) {
                // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL
                url
            }
        }
    }

    override fun onDownloadFile(attachmentUrl: String, filename: String) {
        scope.launch {
            // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏
            println("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞: $filename")
            println("üì• –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL: $attachmentUrl")

            // –ü—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å URL —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π
            val decodedUrl = decodeUrlWithCyrillic(attachmentUrl)
            println("üì• –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL: $decodedUrl")

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            _state.update {
                it.copy(
                    downloadedFiles = it.downloadedFiles + (attachmentUrl to DownloadedFile(
                        url = attachmentUrl,
                        filename = filename,
                        state = DownloadState.DOWNLOADING
                    ))
                )
            }

            try {
                // –†–µ–∞–ª–∏–∑—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ HttpClient
                println("üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTTP –∑–∞–ø—Ä–æ—Å...")
                val response = httpClient.get(decodedUrl)

                println("üìä HTTP —Å—Ç–∞—Ç—É—Å: ${response.status.value} ${response.status.description}")

                if (response.status.value == 200) {
                    println("‚úÖ HTTP –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–µ–Ω, —á–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")

                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π API –≤–º–µ—Å—Ç–æ deprecated readRawBytes()
                    val bytes = response.body<ByteArray>()

                    println("üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${bytes.size} –±–∞–π—Ç")

                    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    val tempDir = File(System.getProperty("java.io.tmpdir"), "aiprompts_downloads")
                    if (!tempDir.exists()) {
                        tempDir.mkdirs()
                        println("üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${tempDir.absolutePath}")
                    }
                    val tempFile = File(tempDir, filename)
                    tempFile.writeBytes(bytes)

                    println("üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${tempFile.absolutePath}")

                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ —á–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
                    val fileType = filename.substringAfterLast(".", "").lowercase()
                    val content = if (fileType in listOf("txt", "md", "json", "xml", "html")) {
                        val textContent = String(bytes, Charsets.UTF_8)
                        println("üìÑ –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω (${textContent.length} —Å–∏–º–≤–æ–ª–æ–≤)")
                        textContent
                    } else {
                        println("üñºÔ∏è –ë–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ —á–∏—Ç–∞–µ–º")
                        null // –î–ª—è –±–∏–Ω–∞—Ä–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —á–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                    }

                    _state.update {
                        it.copy(
                            downloadedFiles = it.downloadedFiles + (attachmentUrl to DownloadedFile(
                                url = attachmentUrl,
                                filename = filename,
                                state = DownloadState.DOWNLOADED,
                                content = content,
                                localPath = tempFile.absolutePath
                            ))
                        )
                    }

                    println("‚úÖ –§–∞–π–ª '$filename' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
                    _state.update {
                        it.copy(successMessage = "–§–∞–π–ª '$filename' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω (${bytes.size} –±–∞–π—Ç)")
                    }
                } else {
                    val errorMsg = "HTTP ${response.status.value}: ${response.status.description}"
                    println("‚ùå HTTP –æ—à–∏–±–∫–∞: $errorMsg")

                    // –î–ª—è 404 –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    val userFriendlyError = when (response.status.value) {
                        404 -> "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (404). –í–æ–∑–º–æ–∂–Ω–æ, —Å—Å—ã–ª–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ —Ñ–∞–π–ª –±—ã–ª —É–¥–∞–ª–µ–Ω."
                        403 -> "–î–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª—É –∑–∞–ø—Ä–µ—â–µ–Ω (403). –í–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è."
                        500 -> "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (500). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                        else -> "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${response.status.description}"
                    }

                    throw Exception("$errorMsg\n$userFriendlyError")
                }
            } catch (e: Exception) {
                val errorMsg = e.message ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏"
                println("üí• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: $errorMsg")
                e.printStackTrace()

                _state.update {
                    it.copy(
                        downloadedFiles = it.downloadedFiles + (attachmentUrl to DownloadedFile(
                            url = attachmentUrl,
                            filename = filename,
                            state = DownloadState.ERROR,
                            error = errorMsg
                        )),
                        error = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å '$filename': $errorMsg"
                    )
                }
            }
        }
    }

    override fun onPreviewFile(attachmentUrl: String, filename: String) {
        val downloadedFile = _state.value.downloadedFiles[attachmentUrl]
        if (downloadedFile?.state == DownloadState.DOWNLOADED && downloadedFile.content != null) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            _state.update {
                it.copy(successMessage = "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ '$filename':\n\n${downloadedFile.content}")
            }
        } else if (downloadedFile?.state == DownloadState.DOWNLOADED && downloadedFile.content == null) {
            // –î–ª—è –±–∏–Ω–∞—Ä–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            _state.update {
                it.copy(successMessage = "–§–∞–π–ª '$filename' –∑–∞–≥—Ä—É–∂–µ–Ω (${File(downloadedFile.localPath ?: "").length()} –±–∞–π—Ç)")
            }
        } else {
            // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ
            onDownloadFile(attachmentUrl, filename)
        }
    }

    override fun onOpenFileInSystem(attachmentUrl: String, filename: String) {
        val downloadedFile = _state.value.downloadedFiles[attachmentUrl]
        if (downloadedFile?.state == DownloadState.DOWNLOADED && downloadedFile.localPath != null) {
            try {
                val file = File(downloadedFile.localPath)
                if (file.exists()) {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Java Desktop API –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞
                    if (Desktop.isDesktopSupported()) {
                        val desktop = Desktop.getDesktop()
                        if (desktop.isSupported(Desktop.Action.OPEN)) {
                            desktop.open(file)
                            _state.update {
                                it.copy(successMessage = "–§–∞–π–ª '$filename' –æ—Ç–∫—Ä—ã—Ç –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫–µ")
                            }
                        } else {
                            throw Exception("–û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–æ–≤ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —ç—Ç–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ")
                        }
                    } else {
                        throw Exception("Desktop API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —ç—Ç–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ")
                    }
                } else {
                    throw Exception("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${downloadedFile.localPath}")
                }
            } catch (e: IOException) {
                _state.update {
                    it.copy(error = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª '$filename': ${e.message}")
                }
            } catch (e: Exception) {
                _state.update {
                    it.copy(error = "–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ '$filename': ${e.message}")
                }
            }
        } else {
            _state.update {
                it.copy(error = "–§–∞–π–ª '$filename' –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–ª–∏ –ø—É—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            }
        }
    }

    override fun onToggleFileExpansion(postId: String, attachmentUrl: String) {
        val fileId = "$postId:$attachmentUrl"
        val currentExpanded = _state.value.expandedFileIds
        val newExpanded = if (fileId in currentExpanded) {
            currentExpanded - fileId
        } else {
            currentExpanded + fileId
        }
        _state.update {
            it.copy(expandedFileIds = newExpanded)
        }
    }

    override fun onOpenPostInBrowser(postUrl: String) {
        try {
            if (Desktop.isDesktopSupported()) {
                val desktop = Desktop.getDesktop()
                if (desktop.isSupported(Desktop.Action.BROWSE)) {
                    desktop.browse(java.net.URI(postUrl))
                    _state.update {
                        it.copy(successMessage = "–û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Å—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ...")
                    }
                } else {
                    throw Exception("–û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —ç—Ç–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ")
                }
            } else {
                throw Exception("Desktop API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —ç—Ç–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ")
            }
        } catch (e: Exception) {
            _state.update {
                it.copy(error = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É: ${e.message}")
            }
        }
    }

    override fun onDismissError() {
        _state.update {
            it.copy(error = null)
        }
    }

    override fun onDismissSuccess() {
        _state.update {
            it.copy(successMessage = null)
        }
    }

    override fun validateEditedData(postId: String): Boolean {
        var resultJson: PromptJson?=null
        val editedData = _state.value.editedData[postId] ?: return false
        val errors = mutableMapOf<String, String>()

        if (editedData.title.isBlank()) {
            errors["title"] = "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        }

        if (editedData.content.isBlank()) {
            errors["content"] = "–ö–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–æ–º–ø—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        }

        if (editedData.category.isBlank()) {
            errors["category"] = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π"
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –º–∞–ø–ø–∏–Ω–≥–∞
        try {
            val testPromptData = PromptData(
                id = "test-id",
                sourceId = postId,
                title = editedData.title.ifBlank { "Test Title" },
                description = editedData.description,
                variants = listOf(PromptVariant(content = editedData.content)),
                author = _state.value.rawPosts.find { it.postId == postId }?.author ?: Author("", ""),
                createdAt = 0L,
                updatedAt = 0L,
                variables = emptyList(),
                category = editedData.category,
                tags = editedData.tags
            )

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ JSON –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –±–µ–∑ –æ—à–∏–±–æ–∫
            testPromptData.toPromptJson()

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ content –Ω–µ –ø—É—Å—Ç–æ–π –ø–æ—Å–ª–µ –º–∞–ø–ø–∏–Ω–≥–∞
            val promptJson = testPromptData.toPromptJson()
            resultJson = promptJson
            if (promptJson.content.values.all { it.isBlank() }) {
                errors["content"] = "–ö–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–æ–º–ø—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"
            }

        } catch (e: Exception) {
            errors["json"] = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: ${e.message}"
        }

        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö
        _state.update {
            it.copy(validationErrors = it.validationErrors - postId)
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ –æ—à–∏–±–∫–∏
        if (errors.isNotEmpty()) {
            _state.update {
                it.copy(validationErrors = it.validationErrors + (postId to errors))
            }
        }

        // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        if (errors.isEmpty()) {
            println("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è –ø–æ—Å—Ç–∞ $postId")
            // –í—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É JSON
            try {
                println("üìÑ –ü–æ–ª–Ω–∞—è JSON-—Å—Ç—Ä—É–∫—Ç—É—Ä–∞:\n${resultJson}")
            } catch (e: Exception) {
                println("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å JSON: ${e.message}")
            }
        } else {
            println("‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ—Å—Ç–∞ $postId:")
            errors.forEach { (field, error) ->
                println("   - $field: '$error'")
            }
        }

        return errors.isEmpty()
    }

    override fun getValidationErrors(postId: String): Map<String, Map<String, String>> {
        return _state.value.validationErrors
    }

    // --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ---

    private fun normalizeLineBreaks(text: String): String {
        // –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫ –Ω–∞ –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ
        return text.replace(Regex("\\n{2,}"), "\n").trim()
    }

    private fun saveStateToHistory() {
        val currentState = _state.value
        // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –ø—Ä–∏ –Ω–æ–≤–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        if (historyIndex < stateHistory.size - 1) {
            stateHistory.subList(historyIndex + 1, stateHistory.size).clear()
        }
        stateHistory.add(currentState.copy())
        historyIndex = stateHistory.size - 1

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        if (stateHistory.size > 50) {
            stateHistory.removeAt(0)
            historyIndex--
        }
    }

    private fun updateProgress(
        step: ImportStep,
        progress: Float,
        currentItem: String = "",
        totalItems: Int = 0,
        processedItems: Int = 0
    ) {
        _state.update {
            it.copy(
                progress = ImportProgress(
                    currentStep = step,
                    stepProgress = progress,
                    currentItem = currentItem,
                    totalItems = totalItems,
                    processedItems = processedItems
                )
            )
        }
    }
}